---
title:  13. Roman to Integer
date: 2018-3-16  
tags:
    -   leetcode
    -   easy
categories:  
---

# 题目

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.


# 分析与解答
运算法则就是从左往右看，依次相加，如果当前位比后一位小（就是小的放到大的左边了），那么就用大的减去小的（也可以先统一从左往右加，然后遇到反常的就减去两倍的左边小的）

这一题要用到一个函数或者一个map来存储罗马数字和int的对应关系, 
要注意map的使用方式：
  - 定义方式
  - 调用方式 （用方括号）

要注意switch的使用方式

``` c++
class Solution {
public:
    int romanToInt(string s) {
        int ans = 0;
        ans = toInt(s[0]);
        for (int i = 1; i < s.length(); i++) {
            ans += toInt(s[i]);
            if (toInt(s[i-1]) < toInt(s[i])) { 
                ans -= toInt(s[i-1]) * 2;
            } 
        }
        return ans;
    }     
        
        int toInt(char s) {
        switch(s) {
            case 'I': return 1;
            case 'V': return 5;
            case 'X': return 10;
            case 'L': return 50;
            case 'C': return 100;
            case 'D': return 500;
            case 'M': return 1000;
            default:  return 0;
        }
    }   
};
```

``` c++
class Solution {
public:
    int romanToInt(string s) {
        int ans = 0;
        ans = toInt[s[0]];
        for (int i = 1; i < s.length(); i++) {
            ans += toInt[s[i]];
            if (toInt[s[i-1]] < toInt[s[i]]) { 
                ans -= toInt[s[i-1]] * 2;
            } 
        }
        return ans;
    }     
        
    map<char, int> toInt = {
        {'I', 1},
        {'V', 5},
        {'X', 10},
        {'L', 50},
        {'C', 100},
        {'D', 500},
        {'M', 1000}       
        
    };
};
```



 